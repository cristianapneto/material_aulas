ELABORAÇÃO DE PROGRAMAS
Os programas disponibilizam conhecimentos e estratégias de resolução de problemas, indispensáveis para que os computadores (HW+SO) possam desempenhar o seu papel. 
Cabe ao programador fornecer estes conhecimentos e estratégias, pelo que a capacidade de encontrar soluções para problemas é fundamental para um bom programador. 
A programação é, desse modo, a arte de analisar um problema e encontrar um conjunto de acções (algoritmo) capaz de o resolver corretamente e eficazmente. É aqui que reside a grande dificuldade dos alunos nesta UC, pois estão mais habituados a tarefas de memorização e de aplicação automática de fórmulas.
Muitas vezes confunde-se aprender a programar com aprender uma linguagem de programação. Aprender a programar é bem mais complexo. Um bom programador é aquele que consegue encontrar soluções eficazes para problemas de programação.

Motivação
Devem ser consideradas as seguintes fases, na elaboração de um programa:
- especificação do problema;
- planeamento da solução;
- codificação;
- verificação.
Essas fases são dependentes entre si, na medida em que, em muitas situações, é necessário voltar a executar uma fase anterior para chegar a uma solução final satisfatória. Evidentemente que a alteração da especificação inicial do problema na fase de verificação é muito mais grave de que a correcção dum erro de codificação. 
No entanto isso pode acontecer, na medida em que, em muitas situações, o diálogo entre o programador e o utilizador final é complicado (porque o utilizador não tem experiência, não tem noção real do que efectivamente pretende, quando assiste à verificação do programa lembra-se de novas funcionalidades, não quer dialogar, não tem tempo para dialogar, é renitente à informatização porque acha que vai perturbar a sua estabilidade, ou muitas outras causas).
A figura 1 ilustra (de uma forma «um pouco» exagerada) aquilo em que pode re-sultar o mau entendimento entre o programador e o utilizador.
Em problemas complexos, a duração das quatro fases pode ser de vários meses, o que faz com que, se os passos indicados nas fases não tiverem sido ultrapassados com segurança, muito do tempo, trabalho e investimento pode ser deitado fora no final. 
Convém sempre fazer um planeamento detalhado da solução antes de se começar a fase de codificação (por que não construir um protótipo que deve vir a ser aprovado?), isto porque nas fases * e * os métodos de trabalho e os objectivos são totalmente diferentes. Na fase * são esquematizados os métodos para chegar à solução do problema, na fase * desenvolve-se uma implementação, onde o próprio aspecto estético e a comunicação com o utilizador têm um papel relevante. Não se devem misturar essas duas fases, para não se chegar a soluções indesejadas e deficientes.

Especificação do Problema
É evidente que os recursos humanos, materiais e financeiros envolvidos, são parâmetros muito importantes para atingir uma determinada solução. Como no desenvolvimento de qualquer projecto de engenharia o factor preço/qualidade deve ser tido em conta e as opções devem ser equacionadas, discutidas e aprovadas.
Na especificação do problema devem ser quantificados, em primeiro lugar, quais os resultados pretendidos, depois quais os dados que devem ser utilizados para atingir a solução. A obtenção da solução será possível através da descrição das funções que transformam os dados em resultados. A sub-divisão do problema em sub-problemas, especificando quais as ligações entre esses problemas, é uma tarefa muito importante, porque o processo deverá sempre ser seguido com segurança, sem a possibilidade de surgirem erros nas diversas transições. Um erro, mesmo pequeno, poderá destruir muito trabalho e levar a atingir soluções diferentes daquelas inicialmente propostas.
Planeamento da Solução
O planeamento da solução requer a construção de um algoritmo eficiente que manipule o conjunto de dados em jogo, por forma a chegar à solução. Escolhemos, para isso, uma linguagem sintactica (comandos) e semânticamente (regras) bem definida, sendo um algoritmo constituído por uma sequência de comandos pertencentes a essa linguagem. 
Os comandos definem acções que devem ser executadas passo-a-passo, de modo a obter-se uma solução para o problema num número finito de passos. Um conjunto de acções executadas pelo algoritmo define uma acção mais complexa, que poderá permitir obter a solução dum dos sub-problemas do problema proposto. Usaremos também o termo operação para representar as acções elementares ou acções mais complexas. A linguagem algorítmica utilizada nesta fase é completamente independente da linguagem de programação utilizada na fase posterior.
A linguagem algorítmica não é executada pelo computador, apenas serve para a elaboração de um documento de suporte que será de enorme utilidade na codificação e que também servirá de suporte para eventuais discussões sobre decisões técnicas a tomar naquela fase. Os erros semânticos são mais fáceis de detectar nesta fase. Os erros sintácticos não têm muita importância. O bom senso aconselha, todavia, que nesta fase seja tomada a decisão sobre qual a linguagem de programação a utilizar. Muitas vezes a escolha não é muito grande, na medida em que para programar (codificar) é necessária experiência e não se pode ter essa experiência em muitas linguagens.

Codificação
A fase de codificação é simples se o algoritmo for bem elaborado e existir um conjunto de regras de tradução bem definidas. Algumas partes dessa tradução podem ser mais complicadas se houver necessidade de utilizar estruturas de dados ou de controlo mais complexas.
O programador também, com certeza, pretenderá tirar o máximo partido das po-tencialidades específicas da linguagem que utiliza e, porque não, utilizar algumas bibliotecas de funções que tenham sido já escritas noutras codificações e que lhe irão facilitar a tarefa. Um aspecto muito importante nesta fase, tem a ver com a construção de ferramentas que permitam uma fácil utilização do programa.
O programador deverá ter em conta que o utilizador apreciará um programa com estética cuidada, simples de usar, com ajudas que surgem interactivamente, rápido e económico.

Verificação
A verificação contempla dois aspectos complementares: o teste e a manutenção. O teste é basicamente a fase mais esperada em todo o processo. Pela primeira vez vão ser fornecidos dados ao problema e vai-se analisar a solução. É evidente que algumas situações estranhas vão ser detectadas e deve-se proceder à sua correcção. Algumas surpresas também podem surgir, porque o teste deve ser efectuado, pelo menos, por duas pessoas: o programador que vai verificar se o seu trabalho deu os resultados que ele pretendia e o utilizador final (ou alguém que o represente) que vai avaliar todo o processo, desde a primeira até a terceira fase. 
É certo que esta última situação deve ser preparada com cuidado e é conveniente que, em projectos de grande duração, se tenha procedido previamente a algumas de-monstrações para evitar surpresas desagradáveis. O teste termina no momento em que o programa passe a ser utilizado normalmente, começando então a manutenção.
Na manutenção podem, também, surgir situações incorrectas que não tenham sido detectadas no teste, situações que devem ser corrigidas, obviamente. Em aplicações muito complexas, a detecção de todas as anormalidades pode demorar muito tempo, algumas vezes vários meses. Esses problemas não podem, de maneira nenhuma, impedir que o normal funcionamento do programa seja afectado e que os resultados não sejam disponibilizados.
Alguns problemas só são detectados com o tempo, à medida que o volume de in-formação armazenada seja maior. Noutras situações, deficiências do sistema operativo ou da própria electrónica podem causar avarias ou inconsistências, que podem afectar o normal funcionamento do programa. Também alterações à legislação (nacional, internacional ou normas da própria estrutura) podem obrigar a intervenções (alterações ao programa). A manutenção tem como objectivo a resolução de todos esses tipos de problemas.

